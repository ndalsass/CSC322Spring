Problem 1:

// JS Code for Plain White Triangle on Black Background

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );
camera.position.set( 0, 0, 30 );
camera.lookAt( 0, 5, 0 );

const scene = new THREE.Scene();

//create a blue LineBasicMaterial
const material = new THREE.LineBasicMaterial( { color: 0xFFFFFFF } );

const points = [];
points.push( new THREE.Vector3( - 6, 0, 0 ) );
points.push( new THREE.Vector3( 0, 10, 0 ) );
points.push( new THREE.Vector3( 6, 0, 0 ) );
points.push(new THREE.Vector3(-6, 0, 0));

const geometry = new THREE.BufferGeometry().setFromPoints( points );

const line = new THREE.Line( geometry, material );

scene.add( line );
renderer.render( scene, camera );

****************************************************************************************************************************

// JS Code for Tetrahedron design

import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );
camera.position.set( 0, 0, 3 );
camera.lookAt( 0, 0, 0 );

const scene = new THREE.Scene();

//create a blue LineBasicMaterial
const material = new THREE.LineBasicMaterial( { color: 0xFFFFFF } );

const points = [];

// Calculations for a base equilateral 1 tetrahedron
points.push( new THREE.Vector3( -0.5, 0, 0 ) );
points.push( new THREE.Vector3( 0.5, 0, 0 ) );
points.push( new THREE.Vector3( 0, 0, -0.866025 ) );
points.push( new THREE.Vector3( -0.5, 0, 0 ) );
points.push( new THREE.Vector3( 0, 0, 0 ) );
points.push( new THREE.Vector3( 0, 0, -0.866025 ) );
points.push( new THREE.Vector3( 0, 0.81649658, -0.28867513 ) );
points.push( new THREE.Vector3( -0.5, 0, 0 ) );
points.push( new THREE.Vector3( 0, 0.81649658, -0.28867513 ) );
points.push( new THREE.Vector3( 0.5, 0, 0 ) );
points.push( new THREE.Vector3( 0, 0, -0.28867513 ) );
points.push( new THREE.Vector3( -0.5, 0, 0 ) );
points.push( new THREE.Vector3( 0, 0, -0.28867513 ) );
points.push( new THREE.Vector3( -0.25, 0, -0.433333 ) );
points.push( new THREE.Vector3( 0, 0, -0.28867513 ) );
points.push( new THREE.Vector3( 0.25, 0, -0.433333 ) );
points.push( new THREE.Vector3( 0, 0, -0.28867513 ) );
points.push( new THREE.Vector3( 0, 0.81649658, -0.28867513 ) );



// Create shape object
const tetrahedron = new THREE.BufferGeometry().setFromPoints( points );

const line = new THREE.Line( tetrahedron, material );

scene.add( line );
renderer.render( scene, camera );

// Orbit controls for camera movement
const controls = new OrbitControls(camera, renderer.domElement);


var animate = function() {
	// Use built-in JS function
  requestAnimationFrame(animate);
  
  // Render the scene
  renderer.render(scene, camera);
}

// Call function
animate();
